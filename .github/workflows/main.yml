name: Build & Test cord-aes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-matrix:
    name: Build on ${{ matrix.target }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [ software, armv8, cortex-a53, x86_64 ]
        include:
          - target: software
            allow_fail: false
          - target: armv8
            allow_fail: true
          - target: cortex-a53
            allow_fail: true
          - target: x86_64
            allow_fail: false

    continue-on-error: ${{ matrix.allow_fail }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y gcc

    - name: Build for ${{ matrix.target }}
      run: |
        case "${{ matrix.target }}" in
          software)
            gcc -I includes/ -o main main.c src/aes_cipher.c src/aes_helpers.c
            ;;
          armv8)
            echo "⚠️ ARMv8 build requires cross-compiler. Trying to build, may fail..."
            gcc -I includes/ -march=armv8-a+crypto -o main main.c src/aes_cipher.c src/aes_helpers.c || echo "Build failed (expected)"
            ;;
          cortex-a53)
            echo "⚠️ Cortex-A53 build requires cross-compiler. Trying to build, may fail..."
            gcc -I includes/ -mcpu=cortex-a53+crypto -o main main.c src/aes_cipher.c src/aes_helpers.c || echo "Build failed (expected)"
            ;;
          x86_64)
            gcc -I includes/ -march=native -msse2 -maes -o main main.c src/aes_cipher.c src/aes_helpers.c
            ;;
        esac

    - name: Run example (Optional)
      if: matrix.target == 'software' || matrix.target == 'x86_64'
      run: ./main
